// Code generated by protoc-gen-go. DO NOT EDIT.
// source: eventServer.proto

/*
Package serverproto is a generated protocol buffer package.

It is generated from these files:
	eventServer.proto

It has these top-level messages:
	ClientRegisterAddressReq
	ClientRegisterAddressRes
	ClientTransactionReq
	ClientTransactionRes
	ChainTranscationReq
	ChainTranscationRes
	ChainTranscationAccountReq
	ChainTranscationAccountRes
	ClientTransactionJavaReq
	ClientTransactionJavaRes
*/
package serverproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// 客户端注册地址
type ClientRegisterAddressReq struct {
	AddRessIpReq   string `protobuf:"bytes,1,opt,name=AddRessIpReq" json:"AddRessIpReq,omitempty"`
	AddRessPortReq string `protobuf:"bytes,2,opt,name=AddRessPortReq" json:"AddRessPortReq,omitempty"`
	RemarkReq      string `protobuf:"bytes,3,opt,name=RemarkReq" json:"RemarkReq,omitempty"`
}

func (m *ClientRegisterAddressReq) Reset()                    { *m = ClientRegisterAddressReq{} }
func (m *ClientRegisterAddressReq) String() string            { return proto.CompactTextString(m) }
func (*ClientRegisterAddressReq) ProtoMessage()               {}
func (*ClientRegisterAddressReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ClientRegisterAddressReq) GetAddRessIpReq() string {
	if m != nil {
		return m.AddRessIpReq
	}
	return ""
}

func (m *ClientRegisterAddressReq) GetAddRessPortReq() string {
	if m != nil {
		return m.AddRessPortReq
	}
	return ""
}

func (m *ClientRegisterAddressReq) GetRemarkReq() string {
	if m != nil {
		return m.RemarkReq
	}
	return ""
}

// 服务端注册地址返回值
type ClientRegisterAddressRes struct {
	MessageRes   string `protobuf:"bytes,1,opt,name=MessageRes" json:"MessageRes,omitempty"`
	IsSuccess    bool   `protobuf:"varint,2,opt,name=IsSuccess" json:"IsSuccess,omitempty"`
	MessageIDRes string `protobuf:"bytes,3,opt,name=MessageIDRes" json:"MessageIDRes,omitempty"`
}

func (m *ClientRegisterAddressRes) Reset()                    { *m = ClientRegisterAddressRes{} }
func (m *ClientRegisterAddressRes) String() string            { return proto.CompactTextString(m) }
func (*ClientRegisterAddressRes) ProtoMessage()               {}
func (*ClientRegisterAddressRes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ClientRegisterAddressRes) GetMessageRes() string {
	if m != nil {
		return m.MessageRes
	}
	return ""
}

func (m *ClientRegisterAddressRes) GetIsSuccess() bool {
	if m != nil {
		return m.IsSuccess
	}
	return false
}

func (m *ClientRegisterAddressRes) GetMessageIDRes() string {
	if m != nil {
		return m.MessageIDRes
	}
	return ""
}

// 客户端请求交易体
type ClientTransactionReq struct {
	TxIdReq      string `protobuf:"bytes,1,opt,name=TxIdReq" json:"TxIdReq,omitempty"`
	AddressIdReq string `protobuf:"bytes,2,opt,name=AddressIdReq" json:"AddressIdReq,omitempty"`
	ChainIdReq   string `protobuf:"bytes,3,opt,name=ChainIdReq" json:"ChainIdReq,omitempty"`
}

func (m *ClientTransactionReq) Reset()                    { *m = ClientTransactionReq{} }
func (m *ClientTransactionReq) String() string            { return proto.CompactTextString(m) }
func (*ClientTransactionReq) ProtoMessage()               {}
func (*ClientTransactionReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ClientTransactionReq) GetTxIdReq() string {
	if m != nil {
		return m.TxIdReq
	}
	return ""
}

func (m *ClientTransactionReq) GetAddressIdReq() string {
	if m != nil {
		return m.AddressIdReq
	}
	return ""
}

func (m *ClientTransactionReq) GetChainIdReq() string {
	if m != nil {
		return m.ChainIdReq
	}
	return ""
}

// 服务端请求交易返回值
type ClientTransactionRes struct {
	TxIdRes    string `protobuf:"bytes,1,opt,name=TxIdRes" json:"TxIdRes,omitempty"`
	CodeRes    string `protobuf:"bytes,2,opt,name=CodeRes" json:"CodeRes,omitempty"`
	MessageRes string `protobuf:"bytes,3,opt,name=MessageRes" json:"MessageRes,omitempty"`
	TimeRes    string `protobuf:"bytes,4,opt,name=TimeRes" json:"TimeRes,omitempty"`
	ChainIdRes string `protobuf:"bytes,5,opt,name=ChainIdRes" json:"ChainIdRes,omitempty"`
}

func (m *ClientTransactionRes) Reset()                    { *m = ClientTransactionRes{} }
func (m *ClientTransactionRes) String() string            { return proto.CompactTextString(m) }
func (*ClientTransactionRes) ProtoMessage()               {}
func (*ClientTransactionRes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ClientTransactionRes) GetTxIdRes() string {
	if m != nil {
		return m.TxIdRes
	}
	return ""
}

func (m *ClientTransactionRes) GetCodeRes() string {
	if m != nil {
		return m.CodeRes
	}
	return ""
}

func (m *ClientTransactionRes) GetMessageRes() string {
	if m != nil {
		return m.MessageRes
	}
	return ""
}

func (m *ClientTransactionRes) GetTimeRes() string {
	if m != nil {
		return m.TimeRes
	}
	return ""
}

func (m *ClientTransactionRes) GetChainIdRes() string {
	if m != nil {
		return m.ChainIdRes
	}
	return ""
}

// 链请求交易体
type ChainTranscationReq struct {
	TxIdReq       string `protobuf:"bytes,1,opt,name=TxIdReq" json:"TxIdReq,omitempty"`
	TxIpReq       string `protobuf:"bytes,2,opt,name=TxIpReq" json:"TxIpReq,omitempty"`
	TotalVotesReq int32  `protobuf:"varint,3,opt,name=TotalVotesReq" json:"TotalVotesReq,omitempty"`
}

func (m *ChainTranscationReq) Reset()                    { *m = ChainTranscationReq{} }
func (m *ChainTranscationReq) String() string            { return proto.CompactTextString(m) }
func (*ChainTranscationReq) ProtoMessage()               {}
func (*ChainTranscationReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *ChainTranscationReq) GetTxIdReq() string {
	if m != nil {
		return m.TxIdReq
	}
	return ""
}

func (m *ChainTranscationReq) GetTxIpReq() string {
	if m != nil {
		return m.TxIpReq
	}
	return ""
}

func (m *ChainTranscationReq) GetTotalVotesReq() int32 {
	if m != nil {
		return m.TotalVotesReq
	}
	return 0
}

// 服务端对链请求交易返回值
type ChainTranscationRes struct {
	TxIdRes       string `protobuf:"bytes,1,opt,name=TxIdRes" json:"TxIdRes,omitempty"`
	IsReceivedRes bool   `protobuf:"varint,2,opt,name=IsReceivedRes" json:"IsReceivedRes,omitempty"`
}

func (m *ChainTranscationRes) Reset()                    { *m = ChainTranscationRes{} }
func (m *ChainTranscationRes) String() string            { return proto.CompactTextString(m) }
func (*ChainTranscationRes) ProtoMessage()               {}
func (*ChainTranscationRes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *ChainTranscationRes) GetTxIdRes() string {
	if m != nil {
		return m.TxIdRes
	}
	return ""
}

func (m *ChainTranscationRes) GetIsReceivedRes() bool {
	if m != nil {
		return m.IsReceivedRes
	}
	return false
}

// 链请求交易体
type ChainTranscationAccountReq struct {
	TxIdReq      string `protobuf:"bytes,1,opt,name=TxIdReq" json:"TxIdReq,omitempty"`
	IsSuccessReq bool   `protobuf:"varint,2,opt,name=IsSuccessReq" json:"IsSuccessReq,omitempty"`
	CodeReq      string `protobuf:"bytes,3,opt,name=CodeReq" json:"CodeReq,omitempty"`
	MessageReq   string `protobuf:"bytes,4,opt,name=MessageReq" json:"MessageReq,omitempty"`
}

func (m *ChainTranscationAccountReq) Reset()                    { *m = ChainTranscationAccountReq{} }
func (m *ChainTranscationAccountReq) String() string            { return proto.CompactTextString(m) }
func (*ChainTranscationAccountReq) ProtoMessage()               {}
func (*ChainTranscationAccountReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *ChainTranscationAccountReq) GetTxIdReq() string {
	if m != nil {
		return m.TxIdReq
	}
	return ""
}

func (m *ChainTranscationAccountReq) GetIsSuccessReq() bool {
	if m != nil {
		return m.IsSuccessReq
	}
	return false
}

func (m *ChainTranscationAccountReq) GetCodeReq() string {
	if m != nil {
		return m.CodeReq
	}
	return ""
}

func (m *ChainTranscationAccountReq) GetMessageReq() string {
	if m != nil {
		return m.MessageReq
	}
	return ""
}

// 服务端对链请求交易返回值
type ChainTranscationAccountRes struct {
	TxIdRes       string `protobuf:"bytes,1,opt,name=TxIdRes" json:"TxIdRes,omitempty"`
	IsReceivedRes bool   `protobuf:"varint,2,opt,name=IsReceivedRes" json:"IsReceivedRes,omitempty"`
}

func (m *ChainTranscationAccountRes) Reset()                    { *m = ChainTranscationAccountRes{} }
func (m *ChainTranscationAccountRes) String() string            { return proto.CompactTextString(m) }
func (*ChainTranscationAccountRes) ProtoMessage()               {}
func (*ChainTranscationAccountRes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *ChainTranscationAccountRes) GetTxIdRes() string {
	if m != nil {
		return m.TxIdRes
	}
	return ""
}

func (m *ChainTranscationAccountRes) GetIsReceivedRes() bool {
	if m != nil {
		return m.IsReceivedRes
	}
	return false
}

// 服务端发送java请求参数
type ClientTransactionJavaReq struct {
	TxIdRes    string `protobuf:"bytes,1,opt,name=TxIdRes" json:"TxIdRes,omitempty"`
	CodeRes    string `protobuf:"bytes,2,opt,name=CodeRes" json:"CodeRes,omitempty"`
	MessageRes string `protobuf:"bytes,3,opt,name=MessageRes" json:"MessageRes,omitempty"`
}

func (m *ClientTransactionJavaReq) Reset()                    { *m = ClientTransactionJavaReq{} }
func (m *ClientTransactionJavaReq) String() string            { return proto.CompactTextString(m) }
func (*ClientTransactionJavaReq) ProtoMessage()               {}
func (*ClientTransactionJavaReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *ClientTransactionJavaReq) GetTxIdRes() string {
	if m != nil {
		return m.TxIdRes
	}
	return ""
}

func (m *ClientTransactionJavaReq) GetCodeRes() string {
	if m != nil {
		return m.CodeRes
	}
	return ""
}

func (m *ClientTransactionJavaReq) GetMessageRes() string {
	if m != nil {
		return m.MessageRes
	}
	return ""
}

// go客户端收到java服务端返回值
type ClientTransactionJavaRes struct {
	TxIdRes       string `protobuf:"bytes,1,opt,name=TxIdRes" json:"TxIdRes,omitempty"`
	IsReceivedRes string `protobuf:"bytes,2,opt,name=IsReceivedRes" json:"IsReceivedRes,omitempty"`
}

func (m *ClientTransactionJavaRes) Reset()                    { *m = ClientTransactionJavaRes{} }
func (m *ClientTransactionJavaRes) String() string            { return proto.CompactTextString(m) }
func (*ClientTransactionJavaRes) ProtoMessage()               {}
func (*ClientTransactionJavaRes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *ClientTransactionJavaRes) GetTxIdRes() string {
	if m != nil {
		return m.TxIdRes
	}
	return ""
}

func (m *ClientTransactionJavaRes) GetIsReceivedRes() string {
	if m != nil {
		return m.IsReceivedRes
	}
	return ""
}

func init() {
	proto.RegisterType((*ClientRegisterAddressReq)(nil), "server.ClientRegisterAddressReq")
	proto.RegisterType((*ClientRegisterAddressRes)(nil), "server.ClientRegisterAddressRes")
	proto.RegisterType((*ClientTransactionReq)(nil), "server.ClientTransactionReq")
	proto.RegisterType((*ClientTransactionRes)(nil), "server.ClientTransactionRes")
	proto.RegisterType((*ChainTranscationReq)(nil), "server.ChainTranscationReq")
	proto.RegisterType((*ChainTranscationRes)(nil), "server.ChainTranscationRes")
	proto.RegisterType((*ChainTranscationAccountReq)(nil), "server.ChainTranscationAccountReq")
	proto.RegisterType((*ChainTranscationAccountRes)(nil), "server.ChainTranscationAccountRes")
	proto.RegisterType((*ClientTransactionJavaReq)(nil), "server.ClientTransactionJavaReq")
	proto.RegisterType((*ClientTransactionJavaRes)(nil), "server.ClientTransactionJavaRes")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for GoEventService service

type GoEventServiceClient interface {
	GoClientRegistEvent(ctx context.Context, in *ClientRegisterAddressReq, opts ...grpc.CallOption) (*ClientRegisterAddressRes, error)
	GoClientRequestEvent(ctx context.Context, in *ClientTransactionReq, opts ...grpc.CallOption) (*ClientTransactionRes, error)
	GoChainRequestEvent(ctx context.Context, opts ...grpc.CallOption) (GoEventService_GoChainRequestEventClient, error)
	GoChainRequestCountEvent(ctx context.Context, opts ...grpc.CallOption) (GoEventService_GoChainRequestCountEventClient, error)
}

type goEventServiceClient struct {
	cc *grpc.ClientConn
}

func NewGoEventServiceClient(cc *grpc.ClientConn) GoEventServiceClient {
	return &goEventServiceClient{cc}
}

func (c *goEventServiceClient) GoClientRegistEvent(ctx context.Context, in *ClientRegisterAddressReq, opts ...grpc.CallOption) (*ClientRegisterAddressRes, error) {
	out := new(ClientRegisterAddressRes)
	err := grpc.Invoke(ctx, "/server.GoEventService/GoClientRegistEvent", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goEventServiceClient) GoClientRequestEvent(ctx context.Context, in *ClientTransactionReq, opts ...grpc.CallOption) (*ClientTransactionRes, error) {
	out := new(ClientTransactionRes)
	err := grpc.Invoke(ctx, "/server.GoEventService/GoClientRequestEvent", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *goEventServiceClient) GoChainRequestEvent(ctx context.Context, opts ...grpc.CallOption) (GoEventService_GoChainRequestEventClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_GoEventService_serviceDesc.Streams[0], c.cc, "/server.GoEventService/GoChainRequestEvent", opts...)
	if err != nil {
		return nil, err
	}
	x := &goEventServiceGoChainRequestEventClient{stream}
	return x, nil
}

type GoEventService_GoChainRequestEventClient interface {
	Send(*ChainTranscationReq) error
	Recv() (*ChainTranscationRes, error)
	grpc.ClientStream
}

type goEventServiceGoChainRequestEventClient struct {
	grpc.ClientStream
}

func (x *goEventServiceGoChainRequestEventClient) Send(m *ChainTranscationReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *goEventServiceGoChainRequestEventClient) Recv() (*ChainTranscationRes, error) {
	m := new(ChainTranscationRes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *goEventServiceClient) GoChainRequestCountEvent(ctx context.Context, opts ...grpc.CallOption) (GoEventService_GoChainRequestCountEventClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_GoEventService_serviceDesc.Streams[1], c.cc, "/server.GoEventService/GoChainRequestCountEvent", opts...)
	if err != nil {
		return nil, err
	}
	x := &goEventServiceGoChainRequestCountEventClient{stream}
	return x, nil
}

type GoEventService_GoChainRequestCountEventClient interface {
	Send(*ChainTranscationAccountReq) error
	Recv() (*ChainTranscationAccountRes, error)
	grpc.ClientStream
}

type goEventServiceGoChainRequestCountEventClient struct {
	grpc.ClientStream
}

func (x *goEventServiceGoChainRequestCountEventClient) Send(m *ChainTranscationAccountReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *goEventServiceGoChainRequestCountEventClient) Recv() (*ChainTranscationAccountRes, error) {
	m := new(ChainTranscationAccountRes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for GoEventService service

type GoEventServiceServer interface {
	GoClientRegistEvent(context.Context, *ClientRegisterAddressReq) (*ClientRegisterAddressRes, error)
	GoClientRequestEvent(context.Context, *ClientTransactionReq) (*ClientTransactionRes, error)
	GoChainRequestEvent(GoEventService_GoChainRequestEventServer) error
	GoChainRequestCountEvent(GoEventService_GoChainRequestCountEventServer) error
}

func RegisterGoEventServiceServer(s *grpc.Server, srv GoEventServiceServer) {
	s.RegisterService(&_GoEventService_serviceDesc, srv)
}

func _GoEventService_GoClientRegistEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientRegisterAddressReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoEventServiceServer).GoClientRegistEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server.GoEventService/GoClientRegistEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoEventServiceServer).GoClientRegistEvent(ctx, req.(*ClientRegisterAddressReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoEventService_GoClientRequestEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClientTransactionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoEventServiceServer).GoClientRequestEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server.GoEventService/GoClientRequestEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoEventServiceServer).GoClientRequestEvent(ctx, req.(*ClientTransactionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _GoEventService_GoChainRequestEvent_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GoEventServiceServer).GoChainRequestEvent(&goEventServiceGoChainRequestEventServer{stream})
}

type GoEventService_GoChainRequestEventServer interface {
	Send(*ChainTranscationRes) error
	Recv() (*ChainTranscationReq, error)
	grpc.ServerStream
}

type goEventServiceGoChainRequestEventServer struct {
	grpc.ServerStream
}

func (x *goEventServiceGoChainRequestEventServer) Send(m *ChainTranscationRes) error {
	return x.ServerStream.SendMsg(m)
}

func (x *goEventServiceGoChainRequestEventServer) Recv() (*ChainTranscationReq, error) {
	m := new(ChainTranscationReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _GoEventService_GoChainRequestCountEvent_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GoEventServiceServer).GoChainRequestCountEvent(&goEventServiceGoChainRequestCountEventServer{stream})
}

type GoEventService_GoChainRequestCountEventServer interface {
	Send(*ChainTranscationAccountRes) error
	Recv() (*ChainTranscationAccountReq, error)
	grpc.ServerStream
}

type goEventServiceGoChainRequestCountEventServer struct {
	grpc.ServerStream
}

func (x *goEventServiceGoChainRequestCountEventServer) Send(m *ChainTranscationAccountRes) error {
	return x.ServerStream.SendMsg(m)
}

func (x *goEventServiceGoChainRequestCountEventServer) Recv() (*ChainTranscationAccountReq, error) {
	m := new(ChainTranscationAccountReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _GoEventService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "server.GoEventService",
	HandlerType: (*GoEventServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GoClientRegistEvent",
			Handler:    _GoEventService_GoClientRegistEvent_Handler,
		},
		{
			MethodName: "GoClientRequestEvent",
			Handler:    _GoEventService_GoClientRequestEvent_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GoChainRequestEvent",
			Handler:       _GoEventService_GoChainRequestEvent_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "GoChainRequestCountEvent",
			Handler:       _GoEventService_GoChainRequestCountEvent_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "eventServer.proto",
}

// Client API for JavaEventService service

type JavaEventServiceClient interface {
	JavaClientRequestEvent(ctx context.Context, opts ...grpc.CallOption) (JavaEventService_JavaClientRequestEventClient, error)
}

type javaEventServiceClient struct {
	cc *grpc.ClientConn
}

func NewJavaEventServiceClient(cc *grpc.ClientConn) JavaEventServiceClient {
	return &javaEventServiceClient{cc}
}

func (c *javaEventServiceClient) JavaClientRequestEvent(ctx context.Context, opts ...grpc.CallOption) (JavaEventService_JavaClientRequestEventClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_JavaEventService_serviceDesc.Streams[0], c.cc, "/server.JavaEventService/JavaClientRequestEvent", opts...)
	if err != nil {
		return nil, err
	}
	x := &javaEventServiceJavaClientRequestEventClient{stream}
	return x, nil
}

type JavaEventService_JavaClientRequestEventClient interface {
	Send(*ClientTransactionJavaReq) error
	Recv() (*ClientTransactionJavaRes, error)
	grpc.ClientStream
}

type javaEventServiceJavaClientRequestEventClient struct {
	grpc.ClientStream
}

func (x *javaEventServiceJavaClientRequestEventClient) Send(m *ClientTransactionJavaReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *javaEventServiceJavaClientRequestEventClient) Recv() (*ClientTransactionJavaRes, error) {
	m := new(ClientTransactionJavaRes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for JavaEventService service

type JavaEventServiceServer interface {
	JavaClientRequestEvent(JavaEventService_JavaClientRequestEventServer) error
}

func RegisterJavaEventServiceServer(s *grpc.Server, srv JavaEventServiceServer) {
	s.RegisterService(&_JavaEventService_serviceDesc, srv)
}

func _JavaEventService_JavaClientRequestEvent_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(JavaEventServiceServer).JavaClientRequestEvent(&javaEventServiceJavaClientRequestEventServer{stream})
}

type JavaEventService_JavaClientRequestEventServer interface {
	Send(*ClientTransactionJavaRes) error
	Recv() (*ClientTransactionJavaReq, error)
	grpc.ServerStream
}

type javaEventServiceJavaClientRequestEventServer struct {
	grpc.ServerStream
}

func (x *javaEventServiceJavaClientRequestEventServer) Send(m *ClientTransactionJavaRes) error {
	return x.ServerStream.SendMsg(m)
}

func (x *javaEventServiceJavaClientRequestEventServer) Recv() (*ClientTransactionJavaReq, error) {
	m := new(ClientTransactionJavaReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _JavaEventService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "server.JavaEventService",
	HandlerType: (*JavaEventServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "JavaClientRequestEvent",
			Handler:       _JavaEventService_JavaClientRequestEvent_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "eventServer.proto",
}

func init() { proto.RegisterFile("eventServer.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 565 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x55, 0x51, 0x4f, 0x13, 0x41,
	0x10, 0xe6, 0x40, 0xb0, 0x1d, 0x85, 0xe8, 0x42, 0xb4, 0x39, 0x89, 0x69, 0x36, 0xc4, 0xf0, 0xd4,
	0x18, 0xfc, 0x05, 0xa5, 0x18, 0x52, 0x13, 0x93, 0x66, 0x29, 0x3e, 0xa0, 0x2f, 0xc7, 0xdd, 0x04,
	0x2e, 0xc2, 0x6d, 0x7b, 0xb3, 0x6d, 0x7c, 0xf0, 0x91, 0x9f, 0xe0, 0x4f, 0xf0, 0x87, 0x9a, 0xdd,
	0xbd, 0xed, 0xdd, 0x96, 0x5e, 0x2f, 0x46, 0x9f, 0x60, 0xbe, 0xf9, 0x76, 0xbe, 0x99, 0x6f, 0xb6,
	0x7b, 0xf0, 0x12, 0xe7, 0x98, 0xa9, 0x0b, 0xcc, 0xe7, 0x98, 0xf7, 0x26, 0xb9, 0x54, 0x92, 0xed,
	0x90, 0x89, 0xf8, 0x43, 0x00, 0x9d, 0xc1, 0x5d, 0x8a, 0x99, 0x12, 0x78, 0x93, 0x92, 0xc2, 0xbc,
	0x9f, 0x24, 0x39, 0x12, 0x09, 0x9c, 0x32, 0x0e, 0xcf, 0xfb, 0x49, 0x22, 0x90, 0x68, 0x38, 0x11,
	0x38, 0xed, 0x04, 0xdd, 0xe0, 0xb8, 0x2d, 0x3c, 0x8c, 0xbd, 0x83, 0xbd, 0x22, 0x1e, 0xc9, 0x5c,
	0x69, 0xd6, 0xa6, 0x61, 0x2d, 0xa1, 0xec, 0x10, 0xda, 0x02, 0xef, 0xa3, 0xfc, 0xbb, 0xa6, 0x6c,
	0x19, 0x4a, 0x09, 0xf0, 0x9f, 0xb5, 0x5d, 0x10, 0x7b, 0x0b, 0xf0, 0x19, 0x89, 0xa2, 0x1b, 0x14,
	0x48, 0x45, 0x0f, 0x15, 0x44, 0x57, 0x1e, 0xd2, 0xc5, 0x2c, 0x8e, 0x91, 0xc8, 0x88, 0xb7, 0x44,
	0x09, 0xe8, 0x19, 0x0a, 0xee, 0xf0, 0x4c, 0x9f, 0xb7, 0xd2, 0x1e, 0xc6, 0x15, 0x1c, 0x58, 0xf5,
	0x71, 0x1e, 0x65, 0x14, 0xc5, 0x2a, 0x95, 0x99, 0xee, 0xb9, 0x03, 0x4f, 0xc7, 0x3f, 0x86, 0x49,
	0x39, 0xba, 0x0b, 0x0b, 0x67, 0x74, 0x87, 0x36, 0xbd, 0xb9, 0x70, 0x66, 0x81, 0xe9, 0xbe, 0x07,
	0xb7, 0x51, 0x9a, 0x59, 0x86, 0xd5, 0xad, 0x20, 0xfc, 0x77, 0xb0, 0x52, 0x96, 0x4a, 0x59, 0xf2,
	0x65, 0x4d, 0x66, 0x20, 0x13, 0xe3, 0x83, 0x55, 0x74, 0xe1, 0x92, 0x49, 0x5b, 0x8f, 0x4c, 0xd2,
	0x35, 0xd3, 0x7b, 0x93, 0x7c, 0x52, 0xd4, 0xb4, 0xa1, 0xd7, 0x26, 0x75, 0xb6, 0x97, 0xda, 0x24,
	0x2e, 0x61, 0xdf, 0x44, 0xa6, 0xc9, 0x38, 0x6a, 0xf6, 0xc6, 0x66, 0x26, 0xa5, 0x2d, 0x2e, 0x64,
	0x47, 0xb0, 0x3b, 0x96, 0x2a, 0xba, 0xfb, 0x22, 0x15, 0x92, 0x33, 0x65, 0x5b, 0xf8, 0x20, 0xbf,
	0x5c, 0x25, 0xb8, 0xce, 0x95, 0x23, 0xd8, 0x1d, 0x92, 0xc0, 0x18, 0xd3, 0x39, 0x26, 0xce, 0x9b,
	0x96, 0xf0, 0x41, 0xfe, 0x2b, 0x80, 0x70, 0xb9, 0x6e, 0x3f, 0x8e, 0xe5, 0x2c, 0x53, 0x8d, 0xbb,
	0x5e, 0x5c, 0x27, 0x37, 0x54, 0x4b, 0x78, 0x58, 0xb9, 0x18, 0xb7, 0x68, 0x17, 0x7a, 0x8b, 0x99,
	0x16, 0xde, 0x57, 0x10, 0xfe, 0x6d, 0x4d, 0x57, 0xff, 0x3e, 0x74, 0xe6, 0x7e, 0x57, 0x95, 0x2b,
	0xf6, 0x29, 0x9a, 0x47, 0xde, 0xc4, 0xff, 0xef, 0x9a, 0xf1, 0xab, 0x5a, 0xbd, 0xbf, 0x9e, 0xa5,
	0xbd, 0x34, 0xcb, 0xc9, 0xc3, 0x16, 0xec, 0x9d, 0xcb, 0x8f, 0xee, 0x29, 0x4b, 0x63, 0x64, 0x5f,
	0x61, 0xff, 0x5c, 0x56, 0x1f, 0x0e, 0x93, 0x65, 0xdd, 0x9e, 0x7d, 0xdd, 0x7a, 0x75, 0x2f, 0x5b,
	0xd8, 0xc4, 0x20, 0xbe, 0xc1, 0xc6, 0x70, 0x50, 0x16, 0x9f, 0xce, 0xd0, 0x55, 0x3f, 0xf4, 0xcf,
	0xfa, 0x6f, 0x46, 0xb8, 0x2e, 0xab, 0xab, 0x5e, 0x9a, 0x96, 0xf5, 0xc6, 0xbd, 0xa2, 0x6f, 0x16,
	0xc7, 0x1e, 0xff, 0xd6, 0xc2, 0x35, 0x49, 0xe2, 0x1b, 0xc7, 0xc1, 0xfb, 0x80, 0xdd, 0x42, 0xc7,
	0x2f, 0x3b, 0xd0, 0x57, 0xc8, 0xd6, 0xe6, 0x75, 0xc7, 0xcb, 0xeb, 0x1f, 0x36, 0x73, 0x0a, 0xa5,
	0x93, 0x39, 0xbc, 0xd0, 0x1b, 0xf5, 0xf6, 0x70, 0x0d, 0xaf, 0x34, 0xb6, 0xc2, 0xac, 0x6e, 0xad,
	0x1d, 0xc5, 0x35, 0x0c, 0x9b, 0x18, 0x85, 0xee, 0xe9, 0x19, 0xbc, 0xb6, 0x44, 0xf3, 0x01, 0xeb,
	0x55, 0xfe, 0x3f, 0x0d, 0x35, 0xb3, 0xd2, 0xb3, 0xfd, 0xd2, 0x8d, 0x74, 0x6e, 0x14, 0x5c, 0x3d,
	0xab, 0x50, 0xaf, 0x77, 0xcc, 0x9f, 0x0f, 0x7f, 0x02, 0x00, 0x00, 0xff, 0xff, 0x24, 0x50, 0xb6,
	0xe6, 0x13, 0x07, 0x00, 0x00,
}
